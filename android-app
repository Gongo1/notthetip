// MainActivity.kt
package com.tipskipper.mvp

import android.app.Activity
import android.content.Intent
import android.nfc.NfcAdapter
import android.nfc.cardemulation.HostApduService
import android.os.Bundle
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {
    private lateinit var nfcAdapter: NfcAdapter
    private lateinit var statusText: TextView
    private lateinit var skipTipsButton: Button
    private var isSkipModeActive = false

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        initializeViews()
        initializeNFC()
        setupClickListeners()
    }

    private fun initializeViews() {
        statusText = findViewById(R.id.statusText)
        skipTipsButton = findViewById(R.id.skipTipsButton)
        
        updateStatus("Ready - NFC not active")
    }

    private fun initializeNFC() {
        nfcAdapter = NfcAdapter.getDefaultAdapter(this)
        
        if (nfcAdapter == null) {
            updateStatus("NFC not supported on this device")
            skipTipsButton.isEnabled = false
            return
        }
        
        if (!nfcAdapter.isEnabled) {
            updateStatus("Please enable NFC in settings")
            skipTipsButton.text = "Enable NFC"
            skipTipsButton.setOnClickListener {
                startActivity(Intent(android.provider.Settings.ACTION_NFC_SETTINGS))
            }
            return
        }
    }

    private fun setupClickListeners() {
        skipTipsButton.setOnClickListener {
            toggleSkipMode()
        }
    }

    private fun toggleSkipMode() {
        if (!isSkipModeActive) {
            activateSkipMode()
        } else {
            deactivateSkipMode()
        }
    }

    private fun activateSkipMode() {
        isSkipModeActive = true
        skipTipsButton.text = "Deactivate Tip Skipping"
        skipTipsButton.setBackgroundColor(getColor(android.R.color.holo_red_light))
        updateStatus("Tip skipping ACTIVE - Tap to pay")
        
        // Start the NFC service
        val intent = Intent(this, TipSkipperService::class.java)
        startService(intent)
        
        Toast.makeText(this, "Now tap your phone to the payment terminal", Toast.LENGTH_LONG).show()
    }

    private fun deactivateSkipMode() {
        isSkipModeActive = false
        skipTipsButton.text = "Activate Tip Skipping"
        skipTipsButton.setBackgroundColor(getColor(android.R.color.holo_green_light))
        updateStatus("Tip skipping inactive")
        
        // Stop the NFC service
        val intent = Intent(this, TipSkipperService::class.java)
        stopService(intent)
    }

    private fun updateStatus(status: String) {
        statusText.text = status
    }

    override fun onResume() {
        super.onResume()
        if (nfcAdapter?.isEnabled == true && isSkipModeActive) {
            updateStatus("Tip skipping ACTIVE - Tap to pay")
        }
    }
}

// TipSkipperService.kt
class TipSkipperService : HostApduService() {
    
    companion object {
        // Standard payment app AID (Application Identifier)
        private const val PAYMENT_AID = "A0000000031010"
        
        // Square-specific command identifiers (these would need reverse engineering)
        private const val SQUARE_TIP_PROMPT_CMD = "00A4040007"
        private const val SKIP_TIP_RESPONSE = "9000" // Success response
    }

    override fun processCommandApdu(commandApdu: ByteArray?, extras: Bundle?): ByteArray {
        if (commandApdu == null) return byteArrayOf()
        
        val command = bytesToHex(commandApdu)
        
        return when {
            // Handle payment selection
            command.startsWith("00A40400") -> {
                handlePaymentSelection()
            }
            
            // Handle tip prompt (this is the key part that needs reverse engineering)
            command.contains("tip", ignoreCase = true) || 
            command.startsWith(SQUARE_TIP_PROMPT_CMD) -> {
                handleTipPrompt()
            }
            
            // Default payment processing
            else -> {
                handleStandardPayment(commandApdu)
            }
        }
    }

    private fun handlePaymentSelection(): ByteArray {
        // Respond that we're a valid payment method
        return hexToBytes("9000")
    }

    private fun handleTipPrompt(): ByteArray {
        // This is where we automatically skip the tip
        // In practice, this would need to be reverse engineered from Square terminals
        
        // Send "no tip" response
        val noTipResponse = "0000" // 0% tip or skip
        return hexToBytes(noTipResponse + SKIP_TIP_RESPONSE)
    }

    private fun handleStandardPayment(commandApdu: ByteArray): ByteArray {
        // Handle normal payment flow
        // This would integrate with actual payment processing
        
        // For MVP, just return success
        return hexToBytes(SKIP_TIP_RESPONSE)
    }

    override fun onDeactivated(reason: Int) {
        // Handle when NFC connection is lost
        super.onDeactivated(reason)
    }

    // Utility functions
    private fun bytesToHex(bytes: ByteArray): String {
        return bytes.joinToString("") { "%02X".format(it) }
    }

    private fun hexToBytes(hex: String): ByteArray {
        return hex.chunked(2).map { it.toInt(16).toByte() }.toByteArray()
    }
}

// activity_main.xml (Android Layout)
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="24dp"
    android:gravity="center">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="TipSkipper MVP"
        android:textSize="24sp"
        android:textStyle="bold"
        android:layout_marginBottom="32dp" />

    <TextView
        android:id="@+id/statusText"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Initializing..."
        android:textSize="16sp"
        android:layout_marginBottom="24dp"
        android:textAlignment="center" />

    <Button
        android:id="@+id/skipTipsButton"
        android:layout_width="200dp"
        android:layout_height="60dp"
        android:text="Activate Tip Skipping"
        android:textSize="16sp"
        android:background="@android:color/holo_green_light" />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Instructions:\n1. Tap 'Activate Tip Skipping'\n2. Tap phone to payment terminal\n3. App will automatically skip tips"
        android:textSize="14sp"
        android:layout_marginTop="32dp"
        android:textAlignment="center" />

</LinearLayout>

// AndroidManifest.xml additions needed
<uses-permission android:name="android.permission.NFC" />

<service
    android:name=".TipSkipperService"
    android:exported="true"
    android:permission="android.permission.BIND_NFC_SERVICE">
    <intent-filter>
        <action android:name="android.nfc.cardemulation.action.HOST_APDU_SERVICE" />
    </intent-filter>
    <meta-data
        android:name="android.nfc.cardemulation.host_apdu_service"
        android:resource="@xml/apduservice" />
</service>

// res/xml/apduservice.xml
<?xml version="1.0" encoding="utf-8"?>
<host-apdu-service xmlns:android="http://schemas.android.com/apk/res/android"
    android:description="@string/service_desc"
    android:requireDeviceUnlock="false">
    <aid-group
        android:category="payment"
        android:description="@string/aid_group_desc">
        <aid-filter android:name="A0000000031010" />
    </aid-group>
</host-apdu-service>

// build.gradle (app level) dependencies
dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
}
